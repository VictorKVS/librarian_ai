# üìÑ –§–∞–π–ª: env.py
# üìÇ –ü—É—Ç—å: db/alembic/
# üìå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –°–≤—è–∑—ã–≤–∞–µ—Ç Alembic —Å SQLAlchemy metadata –∏ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

import logging
from logging.config import fileConfig
from sqlalchemy import engine_from_config, pool
from alembic import context

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('alembic.env')

try:
    from db.models import Base
    from utils.config import settings
except ImportError as e:
    logger.error("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: %s", e)
    raise

# Alembic Config object
config = context.config

# –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π
target_metadata = Base.metadata

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
db_url = getattr(settings, 'DATABASE_URL', None)
if not db_url:
    raise ValueError("DATABASE_URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
config.set_main_option("sqlalchemy.url", db_url)

def include_object(object, name, type_, reflected, compare_to):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –º–∏–≥—Ä–∞—Ü–∏–∏."""
    if type_ == "table" and object.schema and object.schema != "public":
        return False
    return True

def run_migrations_offline():
    """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –≤ offline-—Ä–µ–∂–∏–º–µ (–±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î)."""
    context.configure(
        url=db_url,
        target_metadata=target_metadata,
        literal_binds=True,
        compare_type=True,
        compare_server_default=True,
        include_object=include_object,
        render_as_batch=True  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ SQLite
    )

    with context.begin_transaction():
        context.run_migrations()

def run_migrations_online():
    """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –≤ online-—Ä–µ–∂–∏–º–µ (—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î)."""
    connectable = engine_from_config(
        config.get_section(config.config_ini_section, {}),
        prefix='sqlalchemy.',
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            compare_type=True,
            compare_server_default=True,
            include_object=include_object,
            render_as_batch=True
        )

        with context.begin_transaction():
            context.run_migrations()

if context.is_offline_mode():
    logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –≤ offline-—Ä–µ–∂–∏–º–µ")
    run_migrations_offline()
else:
    logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –≤ online-—Ä–µ–∂–∏–º–µ")
    run_migrations_online()
