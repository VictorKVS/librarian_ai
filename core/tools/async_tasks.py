# -*- coding: utf-8 -*-
# üìÑ –§–∞–π–ª: async_tasks.py
# üìÇ –ü—É—Ç—å: core/tools/async_tasks.py
# üìå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ Celery-–∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å–∞

from celery import Celery
from celery.result import AsyncResult
import logging
from typing import Dict, Any
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Celery (–±—Ä–æ–∫–µ—Ä –∏ backend ‚Äî Redis)
celery_app = Celery(
    "librarian_ai",
    broker="redis://localhost:6379/0",
    backend="redis://localhost:6379/1",
)

celery_app.conf.update(
    task_serializer="json",
    result_serializer="json",
    accept_content=["json"],
    task_track_started=True,
    task_time_limit=600,  # 10 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
    worker_prefetch_multiplier=1,
)

class DocumentProcessingError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."""
    pass

@celery_app.task(bind=True, name="process_document")
def process_document_async(self, doc_id: str) -> Dict[str, Any]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ ID.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ª–æ–≥–∞–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏.
    """
    logs = []
    started_at = datetime.utcnow().isoformat()

    try:
        def log(stage: str, progress: float):
            logs.append(stage)
            self.update_state(state='PROGRESS', meta={
                "stage": stage,
                "progress": progress,
                "logs": logs,
                "started_at": started_at
            })
            logger.info(f"[{doc_id}] {stage}")

        # === –ü—Ä–∏–º–µ—Ä –ø–∞–π–ø–ª–∞–π–Ω–∞ ===
        log("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞", 0.1)
        # document = load_document(doc_id)

        log("üîç –ß–∞–Ω–∫–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑", 0.4)
        # chunks = chunker(document)

        log("üìê –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", 0.6)
        # embeddings = embed(chunks)

        log("üß† –ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ / –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π", 0.8)
        # entities = extract_entities(embeddings)

        log("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î / —Ö—Ä–∞–Ω–∏–ª–∏—â–µ", 0.95)
        # store(doc_id, embeddings, entities)

        finished_at = datetime.utcnow().isoformat()
        return {
            "status": "done",
            "doc_id": doc_id,
            "progress": 1.0,
            "started_at": started_at,
            "finished_at": finished_at,
            "logs": logs,
        }

    except Exception as e:
        error_msg = f"[{doc_id}] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
        logger.error(error_msg, exc_info=True)
        logs.append(error_msg)
        self.update_state(state='FAILURE', meta={
            "error": error_msg,
            "progress": 0.0,
            "logs": logs,
            "started_at": started_at
        })
        raise DocumentProcessingError(error_msg) from e

def get_task_status(task_id: str) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –ø–æ ID.
    """
    result = AsyncResult(task_id, app=celery_app)
    status = {
        "task_id": task_id,
        "status": result.status,
        "result": result.result
    }

    if result.status == "PROGRESS":
        status.update(result.info or {})
    elif result.status == "FAILURE":
        status["error"] = str(result.info)

    return status

def cancel_task(task_id: str) -> Dict[str, Any]:
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ ID.
    """
    try:
        result = AsyncResult(task_id, app=celery_app)
        result.revoke(terminate=True)
        logger.warning(f"–ó–∞–¥–∞—á–∞ {task_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é")
        return {"task_id": task_id, "success": True, "message": "–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ {task_id}: {str(e)}")
        return {"task_id": task_id, "success": False, "message": f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: {str(e)}"}
