"""
tests/test_loader.py
üß™ –¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞ (loader.py)

–¶–µ–ª—å:
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
- –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–µ–ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
- –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∑–∞–≥—Ä—É–∑—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–∫—Å—Ç–∞ (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π, –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π –∏ –¥—Ä.)

–¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ: test_data/
"""

import pytest
from pathlib import Path
from core.tools.loader import load_text_from_file

# üìÇ –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
TEST_DIR = Path(__file__).parent / "test_data"

# üß™ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã: (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –æ–∂–∏–¥–∞–µ–º–∞—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ)
@pytest.mark.parametrize(
    "filename,expected_phrase",
    [
        ("computers.txt", "–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä"),       # —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç
        ("humans.txt", "—ç–º–æ—Ü–∏–∏"),             # –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π
        ("empty.txt", ""),                    # –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª (–≥—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ª—É—á–∞–π)
        ("symbols_only.txt", ""),             # —Ñ–∞–π–ª –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
        ("multilang.txt", "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç")        # –º—É–ª—å—Ç–∏–ª–∏–Ω–≥–≤–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    ]
)
def test_load_text_from_file(filename: str, expected_phrase: str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∑–∞–≥—Ä—É–∑—á–∏–∫:
    - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É
    - –°–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç (–µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω)
    """
    file_path = TEST_DIR / filename
    text = load_text_from_file(file_path)

    assert isinstance(text, str), "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π"
    assert len(text) > 0 or expected_phrase == "", "–¢–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π"

    if expected_phrase:
        assert expected_phrase in text.lower(), f"–û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞ '{expected_phrase}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
