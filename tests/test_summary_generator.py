"""
üß™ –¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ (summary_generator.py)

–¶–µ–ª—å:
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
- –£–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
- –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
"""

import pytest
from core.tools.summary_generator import (
    UniversalSummaryGenerator,
    SummaryRequest,
    SummaryConfig,
    SummaryLength,
    SummaryStyle,
    Role
)

class DummyLLM:
    """üß™ –ó–∞–≥–ª—É—à–∫–∞ LLM-–∫–ª–∏–µ–Ω—Ç–∞"""
    def generate(self, prompt: str) -> str:
        return "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞."

@pytest.fixture
def generator():
    gen = UniversalSummaryGenerator()
    gen.llm = DummyLLM()
    return gen

def test_basic_summary_generation(generator):
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
    request = SummaryRequest(
        text="–≠—Ç–æ —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏. –û–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é.",
        language="ru",
        config=SummaryConfig(length=SummaryLength.SHORT, style=SummaryStyle.SIMPLE),
        roles=[Role.GENERAL]
    )

    result = generator.generate_summary(request)

    assert result.language == "ru"
    assert Role.GENERAL.value in result.summaries
    assert isinstance(result.summaries[Role.GENERAL.value], str)
    assert len(result.key_points) >= 0
    assert result.time_taken >= 0

def test_custom_role_summary(generator):
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–æ–ª—å—é"""
    request = SummaryRequest(
        text="–ù–µ–∫–æ—Ç–æ—Ä—ã–π –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–æ–ª–∏. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π.",
        language="en",
        config=SummaryConfig(length=SummaryLength.MEDIUM),
        custom_roles=["UX_researcher"]
    )

    result = generator.generate_summary(request)

    assert "UX_researcher" in result.summaries
    assert isinstance(result.summaries["UX_researcher"], str)
