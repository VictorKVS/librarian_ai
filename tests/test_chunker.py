"""
tests/test_chunker.py
üß™ –¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è —á–∞–Ω–∫–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞ (chunker.py)

–¶–µ–ª—å:
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–±–∏–µ–Ω–∏—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞–Ω–∫–∏
- –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —á–∞–Ω–∫–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç –∑–∞–¥–∞–Ω–Ω—ã–π –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤
"""

import pytest
from core.text_processing.chunker import chunk_text

@pytest.mark.parametrize("input_text, max_len, expected_chunks", [
    (
        "–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–º–µ—Ä –æ–¥–∏–Ω. –ê —ç—Ç–æ –≤—Ç–æ—Ä–æ–µ. –ò —Ç—Ä–µ—Ç—å–µ –∑–¥–µ—Å—å. –î–∞–ª–µ–µ —á–µ—Ç–≤—ë—Ä—Ç–æ–µ. –ü—è—Ç–æ–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –º—ã—Å–ª—å.",
        50,
        2  # –ü–æ 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —á–∞–Ω–∫
    ),
    (
        "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç.",
        100,
        1  # –û–¥–∏–Ω –∫–æ—Ä–æ—Ç–∫–∏–π —á–∞–Ω–∫
    ),
    (
        "–ü–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü.\n\n–í—Ç–æ—Ä–æ–π –∞–±–∑–∞—Ü, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–º–Ω–æ–≥–æ –¥–ª–∏–Ω–Ω–µ–µ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. " * 5,
        200,
        3  # –û–∂–∏–¥–∞–µ–º –±–æ–ª–µ–µ 1 —á–∞–Ω–∫–∞
    )
])
def test_chunk_text(input_text, max_len, expected_chunks):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —á–∞–Ω–∫–∏–Ω–≥–∞:
    - –î–µ–ª–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞–Ω–∫–∏
    - –£–≤–∞–∂–∞–µ—Ç –ª–∏–º–∏—Ç –¥–ª–∏–Ω—ã
    - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤ (–ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–æ)
    """
    chunks = chunk_text(input_text, max_length=max_len)

    assert isinstance(chunks, list), "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º"
    assert all(isinstance(c, str) for c in chunks), "–ö–∞–∂–¥—ã–π —á–∞–Ω–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π"
    assert all(len(c) <= max_len for c in chunks), "–ù–∏ –æ–¥–∏–Ω —á–∞–Ω–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å max_length"
    assert len(chunks) == expected_chunks or abs(len(chunks) - expected_chunks) <= 1, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ"
